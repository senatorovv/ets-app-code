/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.kumoco.productorder.api;

import com.kumoco.productorder.model.tmf.Error;
import com.kumoco.productorder.model.tmf.ProductOrder;
import com.kumoco.productorder.model.tmf.ProductOrderCreate;
import com.kumoco.productorder.model.tmf.ProductOrderUpdate;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
@javax.annotation.Generated(value = "com.kumoco.productorder.codegen.v3.generators.java.SpringCodegen", date = "2020-06-01T18:11:48.790+01:00[Europe/London]")
@Api(value = "productOrder", description = "the productOrder API")
public interface ProductOrderApi {

    @ApiOperation(value = "Creates a ProductOrder", nickname = "createProductOrder", notes = "This operation creates a ProductOrder entity.", response = ProductOrder.class, tags={ "productOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/productOrder/",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity createProductOrder(@ApiParam(value = "The ProductOrder to be created" ,required=true )  @Valid @RequestBody ProductOrderCreate body,
            @ApiParam(value = "Location identifier") @RequestParam(value = "productOrder.productOrderItem.product.place.id", required = true) String locationId,
            @ApiParam(value = "Product identifier") @RequestParam(value = "productOrder.productOrderItem.product.id", required = false) String bpiId,
                                                    HttpServletResponse response);

    @ApiOperation(value = "Deletes a ProductOrder", nickname = "deleteProductOrder", notes = "This operation deletes a ProductOrder entity.", tags={ "productOrder",})
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/productOrder/{id}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.DELETE)
    ResponseEntity deleteProductOrder(@ApiParam(value = "Identifier of the ProductOrder",required=true) @PathVariable("id") String id
);


    @ApiOperation(value = "List or find ProductOrder objects", nickname = "listProductOrder", notes = "This operation list or find ProductOrder entities", response = ProductOrder.class, responseContainer = "List", tags={ "productOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/productOrder",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity listProductOrder(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields
,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit, HttpServletResponse response
);


    @ApiOperation(value = "Updates partially a ProductOrder", nickname = "patchProductOrder", notes = "This operation updates partially a ProductOrder entity.", response = ProductOrder.class, tags={ "productOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = ProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/productOrder/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.PATCH)
    ResponseEntity patchProductOrder(@ApiParam(value = "The ProductOrder to be updated" ,required=true )  @Valid @RequestBody ProductOrderUpdate body
,@ApiParam(value = "Identifier of the ProductOrder",required=true) @PathVariable("id") String id, HttpServletResponse response
);


    @ApiOperation(value = "Retrieves a ProductOrder by ID", nickname = "retrieveProductOrder", notes = "This operation retrieves a ProductOrder entity. Attribute selection is enabled for all first level attributes.", response = ProductOrder.class, tags={ "productOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/productOrder/{id}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity retrieveProductOrder(@ApiParam(value = "Identifier of the ProductOrder",required=true) @PathVariable("id") String id
,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields, HttpServletResponse response
);

}
