/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.kumoco.productorder.api;

import com.kumoco.productorder.model.tmf.CancelProductOrder;
import com.kumoco.productorder.model.tmf.CancelProductOrderCreate;
import com.kumoco.productorder.model.tmf.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "com.kumoco.productorder.codegen.v3.generators.java.SpringCodegen", date = "2020-06-01T18:11:48.790+01:00[Europe/London]")
@Api(value = "cancelProductOrder", description = "the cancelProductOrder API")
public interface CancelProductOrderApi {

    @ApiOperation(value = "Creates a CancelProductOrder", nickname = "createCancelProductOrder", notes = "This operation creates a CancelProductOrder entity.", response = CancelProductOrder.class, tags={ "cancelProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = CancelProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/cancelProductOrder",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity createCancelProductOrder(@ApiParam(value = "The CancelProductOrder to be created" ,
                    required=true )  @Valid @RequestBody CancelProductOrderCreate body, HttpServletResponse response);

    @ApiOperation(value = "List or find CancelProductOrder objects", nickname = "listCancelProductOrder", notes = "This operation list or find CancelProductOrder entities", response = CancelProductOrder.class, responseContainer = "List", tags={ "cancelProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CancelProductOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/cancelProductOrder",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CancelProductOrder>> listCancelProductOrder(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields
,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit
);


    @ApiOperation(value = "Retrieves a CancelProductOrder by ID", nickname = "retrieveCancelProductOrder", notes = "This operation retrieves a CancelProductOrder entity. Attribute selection is enabled for all first level attributes.", response = CancelProductOrder.class, tags={ "cancelProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = CancelProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/cancelProductOrder/{id}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<CancelProductOrder> retrieveCancelProductOrder(@ApiParam(value = "Identifier of the CancelProductOrder",required=true) @PathVariable("id") String id
,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields
);

}
